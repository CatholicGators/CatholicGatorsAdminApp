// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Interests should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Interests
    classes={Object {}}
    getInterests={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    interests={
      Array [
        Object {
          "id": "test",
          "options": Array [
            Object {
              "id": 1,
              "text": "totally testing",
            },
          ],
          "text": "testing",
        },
      ]
    }
    updateInterests={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(Toolbar)>
          <WithStyles(Typography)
            variant="h6"
          >
            Edit Interests step of form
          </WithStyles(Typography)>
        </WithStyles(Toolbar)>,
        <div>
          <div>
            <WithStyles(Typography)>
              testing
            </WithStyles(Typography)>
            <WithStyles(EditableInterestOption)
              beginEditing={[Function]}
              cancelEditing={[Function]}
              deleteOption={[Function]}
              isEditing={false}
              option={
                Object {
                  "id": 1,
                  "text": "totally testing",
                }
              }
              saveOption={[Function]}
            />
          </div>
        </div>,
      ],
      "className": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(Typography)
            variant="h6"
          >
            Edit Interests step of form
          </WithStyles(Typography)>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Edit Interests step of form",
            "variant": "h6",
          },
          "ref": null,
          "rendered": "Edit Interests step of form",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              <WithStyles(Typography)>
                testing
              </WithStyles(Typography)>
              <WithStyles(EditableInterestOption)
                beginEditing={[Function]}
                cancelEditing={[Function]}
                deleteOption={[Function]}
                isEditing={false}
                option={
                  Object {
                    "id": 1,
                    "text": "totally testing",
                  }
                }
                saveOption={[Function]}
              />
            </div>,
          ],
          "className": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "test",
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)>
                  testing
                </WithStyles(Typography)>,
                Array [
                  <WithStyles(EditableInterestOption)
                    beginEditing={[Function]}
                    cancelEditing={[Function]}
                    deleteOption={[Function]}
                    isEditing={false}
                    option={
                      Object {
                        "id": 1,
                        "text": "totally testing",
                      }
                    }
                    saveOption={[Function]}
                  />,
                ],
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "testing",
                },
                "ref": null,
                "rendered": "testing",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "class",
                "props": Object {
                  "beginEditing": [Function],
                  "cancelEditing": [Function],
                  "deleteOption": [Function],
                  "isEditing": false,
                  "option": Object {
                    "id": 1,
                    "text": "totally testing",
                  },
                  "saveOption": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Toolbar)>
            <WithStyles(Typography)
              variant="h6"
            >
              Edit Interests step of form
            </WithStyles(Typography)>
          </WithStyles(Toolbar)>,
          <div>
            <div>
              <WithStyles(Typography)>
                testing
              </WithStyles(Typography)>
              <WithStyles(EditableInterestOption)
                beginEditing={[Function]}
                cancelEditing={[Function]}
                deleteOption={[Function]}
                isEditing={false}
                option={
                  Object {
                    "id": 1,
                    "text": "totally testing",
                  }
                }
                saveOption={[Function]}
              />
            </div>
          </div>,
        ],
        "className": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(Typography)
              variant="h6"
            >
              Edit Interests step of form
            </WithStyles(Typography)>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Edit Interests step of form",
              "variant": "h6",
            },
            "ref": null,
            "rendered": "Edit Interests step of form",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <WithStyles(Typography)>
                  testing
                </WithStyles(Typography)>
                <WithStyles(EditableInterestOption)
                  beginEditing={[Function]}
                  cancelEditing={[Function]}
                  deleteOption={[Function]}
                  isEditing={false}
                  option={
                    Object {
                      "id": 1,
                      "text": "totally testing",
                    }
                  }
                  saveOption={[Function]}
                />
              </div>,
            ],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "test",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Typography)>
                    testing
                  </WithStyles(Typography)>,
                  Array [
                    <WithStyles(EditableInterestOption)
                      beginEditing={[Function]}
                      cancelEditing={[Function]}
                      deleteOption={[Function]}
                      isEditing={false}
                      option={
                        Object {
                          "id": 1,
                          "text": "totally testing",
                        }
                      }
                      saveOption={[Function]}
                    />,
                  ],
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "testing",
                  },
                  "ref": null,
                  "rendered": "testing",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "class",
                  "props": Object {
                    "beginEditing": [Function],
                    "cancelEditing": [Function],
                    "deleteOption": [Function],
                    "isEditing": false,
                    "option": Object {
                      "id": 1,
                      "text": "totally testing",
                    },
                    "saveOption": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
