// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Interests should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Interests
    addOption={[MockFunction]}
    addSection={[MockFunction]}
    classes={Object {}}
    getInterests={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    interests={
      Array [
        Object {
          "id": "test",
          "options": Array [
            Object {
              "id": "1",
              "text": "totally testing",
            },
          ],
          "position": 0,
          "text": "testing",
        },
      ]
    }
    updateOptionText={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(Toolbar)>
          <WithStyles(Typography)
            variant="h6"
          >
            Edit Interests step of form
          </WithStyles(Typography)>
          <WithStyles(Button)
            color="primary"
            id="add-section-btn"
            onClick={[Function]}
            variant="outlined"
          >
            Add Section
          </WithStyles(Button)>
        </WithStyles(Toolbar)>,
        <div>
          <div
            id="section"
          >
            <WithStyles(Typography)>
              testing
            </WithStyles(Typography)>
            <WithStyles(EditableOptionRow)
              beginEditingOption={[Function]}
              cancelEditingOption={[Function]}
              deleteOption={[Function]}
              editingOptionId={null}
              option={
                Object {
                  "id": "1",
                  "text": "totally testing",
                }
              }
              saveOption={[Function]}
            />
            <div
              id="add-option"
            >
              <WithStyles(AddableTextField)
                beginAdding={[Function]}
                cancelAdding={[Function]}
                isAdding={false}
                onAdd={[Function]}
              />
            </div>
          </div>
        </div>,
        null,
      ],
      "className": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Typography)
              variant="h6"
            >
              Edit Interests step of form
            </WithStyles(Typography)>,
            <WithStyles(Button)
              color="primary"
              id="add-section-btn"
              onClick={[Function]}
              variant="outlined"
            >
              Add Section
            </WithStyles(Button)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Edit Interests step of form",
              "variant": "h6",
            },
            "ref": null,
            "rendered": "Edit Interests step of form",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Add Section",
              "className": undefined,
              "color": "primary",
              "id": "add-section-btn",
              "onClick": [Function],
              "variant": "outlined",
            },
            "ref": null,
            "rendered": "Add Section",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              id="section"
            >
              <WithStyles(Typography)>
                testing
              </WithStyles(Typography)>
              <WithStyles(EditableOptionRow)
                beginEditingOption={[Function]}
                cancelEditingOption={[Function]}
                deleteOption={[Function]}
                editingOptionId={null}
                option={
                  Object {
                    "id": "1",
                    "text": "totally testing",
                  }
                }
                saveOption={[Function]}
              />
              <div
                id="add-option"
              >
                <WithStyles(AddableTextField)
                  beginAdding={[Function]}
                  cancelAdding={[Function]}
                  isAdding={false}
                  onAdd={[Function]}
                />
              </div>
            </div>,
          ],
          "className": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "test",
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)>
                  testing
                </WithStyles(Typography)>,
                Array [
                  <WithStyles(EditableOptionRow)
                    beginEditingOption={[Function]}
                    cancelEditingOption={[Function]}
                    deleteOption={[Function]}
                    editingOptionId={null}
                    option={
                      Object {
                        "id": "1",
                        "text": "totally testing",
                      }
                    }
                    saveOption={[Function]}
                  />,
                ],
                <div
                  id="add-option"
                >
                  <WithStyles(AddableTextField)
                    beginAdding={[Function]}
                    cancelAdding={[Function]}
                    isAdding={false}
                    onAdd={[Function]}
                  />
                </div>,
              ],
              "id": "section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "testing",
                },
                "ref": null,
                "rendered": "testing",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "1",
                "nodeType": "class",
                "props": Object {
                  "beginEditingOption": [Function],
                  "cancelEditingOption": [Function],
                  "deleteOption": [Function],
                  "editingOptionId": null,
                  "option": Object {
                    "id": "1",
                    "text": "totally testing",
                  },
                  "saveOption": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    null,
                    <WithStyles(AddableTextField)
                      beginAdding={[Function]}
                      cancelAdding={[Function]}
                      isAdding={false}
                      onAdd={[Function]}
                    />,
                  ],
                  "className": undefined,
                  "id": "add-option",
                },
                "ref": null,
                "rendered": Array [
                  null,
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "beginAdding": [Function],
                      "cancelAdding": [Function],
                      "isAdding": false,
                      "onAdd": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      null,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Toolbar)>
            <WithStyles(Typography)
              variant="h6"
            >
              Edit Interests step of form
            </WithStyles(Typography)>
            <WithStyles(Button)
              color="primary"
              id="add-section-btn"
              onClick={[Function]}
              variant="outlined"
            >
              Add Section
            </WithStyles(Button)>
          </WithStyles(Toolbar)>,
          <div>
            <div
              id="section"
            >
              <WithStyles(Typography)>
                testing
              </WithStyles(Typography)>
              <WithStyles(EditableOptionRow)
                beginEditingOption={[Function]}
                cancelEditingOption={[Function]}
                deleteOption={[Function]}
                editingOptionId={null}
                option={
                  Object {
                    "id": "1",
                    "text": "totally testing",
                  }
                }
                saveOption={[Function]}
              />
              <div
                id="add-option"
              >
                <WithStyles(AddableTextField)
                  beginAdding={[Function]}
                  cancelAdding={[Function]}
                  isAdding={false}
                  onAdd={[Function]}
                />
              </div>
            </div>
          </div>,
          null,
        ],
        "className": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                variant="h6"
              >
                Edit Interests step of form
              </WithStyles(Typography)>,
              <WithStyles(Button)
                color="primary"
                id="add-section-btn"
                onClick={[Function]}
                variant="outlined"
              >
                Add Section
              </WithStyles(Button)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Edit Interests step of form",
                "variant": "h6",
              },
              "ref": null,
              "rendered": "Edit Interests step of form",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Add Section",
                "className": undefined,
                "color": "primary",
                "id": "add-section-btn",
                "onClick": [Function],
                "variant": "outlined",
              },
              "ref": null,
              "rendered": "Add Section",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                id="section"
              >
                <WithStyles(Typography)>
                  testing
                </WithStyles(Typography)>
                <WithStyles(EditableOptionRow)
                  beginEditingOption={[Function]}
                  cancelEditingOption={[Function]}
                  deleteOption={[Function]}
                  editingOptionId={null}
                  option={
                    Object {
                      "id": "1",
                      "text": "totally testing",
                    }
                  }
                  saveOption={[Function]}
                />
                <div
                  id="add-option"
                >
                  <WithStyles(AddableTextField)
                    beginAdding={[Function]}
                    cancelAdding={[Function]}
                    isAdding={false}
                    onAdd={[Function]}
                  />
                </div>
              </div>,
            ],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "test",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Typography)>
                    testing
                  </WithStyles(Typography)>,
                  Array [
                    <WithStyles(EditableOptionRow)
                      beginEditingOption={[Function]}
                      cancelEditingOption={[Function]}
                      deleteOption={[Function]}
                      editingOptionId={null}
                      option={
                        Object {
                          "id": "1",
                          "text": "totally testing",
                        }
                      }
                      saveOption={[Function]}
                    />,
                  ],
                  <div
                    id="add-option"
                  >
                    <WithStyles(AddableTextField)
                      beginAdding={[Function]}
                      cancelAdding={[Function]}
                      isAdding={false}
                      onAdd={[Function]}
                    />
                  </div>,
                ],
                "id": "section",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "testing",
                  },
                  "ref": null,
                  "rendered": "testing",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "class",
                  "props": Object {
                    "beginEditingOption": [Function],
                    "cancelEditingOption": [Function],
                    "deleteOption": [Function],
                    "editingOptionId": null,
                    "option": Object {
                      "id": "1",
                      "text": "totally testing",
                    },
                    "saveOption": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      null,
                      <WithStyles(AddableTextField)
                        beginAdding={[Function]}
                        cancelAdding={[Function]}
                        isAdding={false}
                        onAdd={[Function]}
                      />,
                    ],
                    "className": undefined,
                    "id": "add-option",
                  },
                  "ref": null,
                  "rendered": Array [
                    null,
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "beginAdding": [Function],
                        "cancelAdding": [Function],
                        "isAdding": false,
                        "onAdd": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        null,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
