// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserTable should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserTable
    batchDeleteUsers={[MockFunction]}
    getUsers={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    updateUser={[MockFunction]}
    users={
      Array [
        Object {
          "id": "1",
          "isAdmin": false,
          "name": "Joey",
        },
        Object {
          "id": "2",
          "isAdmin": false,
          "name": "Ryan",
        },
        Object {
          "id": "3",
          "isAdmin": true,
          "name": "Espresso Shot Capuccino",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WithStyles(Paper)
        className={null}
      >
        <WithStyles(UserTableToolbar)
          handleBatchApprove={[Function]}
          handleBatchAuthorize={[Function]}
          handleBatchDelete={[Function]}
          numSelected={0}
        />
        <WithStyles(Table)>
          <WithStyles(TableHead)>
            <WithStyles(TableRow)>
              <WithStyles(TableCell)
                padding="checkbox"
              >
                <WithStyles(Checkbox)
                  checked={false}
                  indeterminate={false}
                  onChange={[Function]}
                />
              </WithStyles(TableCell)>
              <WithStyles(TableCell)
                className={null}
              >
                Profile Pic
              </WithStyles(TableCell)>
              <WithStyles(TableCell)
                className={null}
              >
                Name
              </WithStyles(TableCell)>
              <WithStyles(TableCell)>
                Email
              </WithStyles(TableCell)>
              <WithStyles(TableCell)>
                Approved
              </WithStyles(TableCell)>
              <WithStyles(TableCell)>
                Admin
              </WithStyles(TableCell)>
            </WithStyles(TableRow)>
          </WithStyles(TableHead)>
          <WithStyles(TableBody)>
            <Connect(WithStyles(UserTableRow))
              handleSelect={[Function]}
              isSelected={false}
              user={
                Object {
                  "id": "1",
                  "isAdmin": false,
                  "name": "Joey",
                }
              }
            />
            <Connect(WithStyles(UserTableRow))
              handleSelect={[Function]}
              isSelected={false}
              user={
                Object {
                  "id": "2",
                  "isAdmin": false,
                  "name": "Ryan",
                }
              }
            />
            <Connect(WithStyles(UserTableRow))
              handleSelect={[Function]}
              isSelected={false}
              user={
                Object {
                  "id": "3",
                  "isAdmin": true,
                  "name": "Espresso Shot Capuccino",
                }
              }
            />
          </WithStyles(TableBody)>
        </WithStyles(Table)>
      </WithStyles(Paper)>,
      "className": null,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(UserTableToolbar)
            handleBatchApprove={[Function]}
            handleBatchAuthorize={[Function]}
            handleBatchDelete={[Function]}
            numSelected={0}
          />,
          <WithStyles(Table)>
            <WithStyles(TableHead)>
              <WithStyles(TableRow)>
                <WithStyles(TableCell)
                  padding="checkbox"
                >
                  <WithStyles(Checkbox)
                    checked={false}
                    indeterminate={false}
                    onChange={[Function]}
                  />
                </WithStyles(TableCell)>
                <WithStyles(TableCell)
                  className={null}
                >
                  Profile Pic
                </WithStyles(TableCell)>
                <WithStyles(TableCell)
                  className={null}
                >
                  Name
                </WithStyles(TableCell)>
                <WithStyles(TableCell)>
                  Email
                </WithStyles(TableCell)>
                <WithStyles(TableCell)>
                  Approved
                </WithStyles(TableCell)>
                <WithStyles(TableCell)>
                  Admin
                </WithStyles(TableCell)>
              </WithStyles(TableRow)>
            </WithStyles(TableHead)>
            <WithStyles(TableBody)>
              <Connect(WithStyles(UserTableRow))
                handleSelect={[Function]}
                isSelected={false}
                user={
                  Object {
                    "id": "1",
                    "isAdmin": false,
                    "name": "Joey",
                  }
                }
              />
              <Connect(WithStyles(UserTableRow))
                handleSelect={[Function]}
                isSelected={false}
                user={
                  Object {
                    "id": "2",
                    "isAdmin": false,
                    "name": "Ryan",
                  }
                }
              />
              <Connect(WithStyles(UserTableRow))
                handleSelect={[Function]}
                isSelected={false}
                user={
                  Object {
                    "id": "3",
                    "isAdmin": true,
                    "name": "Espresso Shot Capuccino",
                  }
                }
              />
            </WithStyles(TableBody)>
          </WithStyles(Table)>,
        ],
        "className": null,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "handleBatchApprove": [Function],
            "handleBatchAuthorize": [Function],
            "handleBatchDelete": [Function],
            "numSelected": 0,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(TableHead)>
                <WithStyles(TableRow)>
                  <WithStyles(TableCell)
                    padding="checkbox"
                  >
                    <WithStyles(Checkbox)
                      checked={false}
                      indeterminate={false}
                      onChange={[Function]}
                    />
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)
                    className={null}
                  >
                    Profile Pic
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)
                    className={null}
                  >
                    Name
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Email
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Approved
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Admin
                  </WithStyles(TableCell)>
                </WithStyles(TableRow)>
              </WithStyles(TableHead)>,
              <WithStyles(TableBody)>
                <Connect(WithStyles(UserTableRow))
                  handleSelect={[Function]}
                  isSelected={false}
                  user={
                    Object {
                      "id": "1",
                      "isAdmin": false,
                      "name": "Joey",
                    }
                  }
                />
                <Connect(WithStyles(UserTableRow))
                  handleSelect={[Function]}
                  isSelected={false}
                  user={
                    Object {
                      "id": "2",
                      "isAdmin": false,
                      "name": "Ryan",
                    }
                  }
                />
                <Connect(WithStyles(UserTableRow))
                  handleSelect={[Function]}
                  isSelected={false}
                  user={
                    Object {
                      "id": "3",
                      "isAdmin": true,
                      "name": "Espresso Shot Capuccino",
                    }
                  }
                />
              </WithStyles(TableBody)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(TableRow)>
                  <WithStyles(TableCell)
                    padding="checkbox"
                  >
                    <WithStyles(Checkbox)
                      checked={false}
                      indeterminate={false}
                      onChange={[Function]}
                    />
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)
                    className={null}
                  >
                    Profile Pic
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)
                    className={null}
                  >
                    Name
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Email
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Approved
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Admin
                  </WithStyles(TableCell)>
                </WithStyles(TableRow)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <WithStyles(TableCell)
                      padding="checkbox"
                    >
                      <WithStyles(Checkbox)
                        checked={false}
                        indeterminate={false}
                        onChange={[Function]}
                      />
                    </WithStyles(TableCell)>,
                    <WithStyles(TableCell)
                      className={null}
                    >
                      Profile Pic
                    </WithStyles(TableCell)>,
                    <WithStyles(TableCell)
                      className={null}
                    >
                      Name
                    </WithStyles(TableCell)>,
                    <WithStyles(TableCell)>
                      Email
                    </WithStyles(TableCell)>,
                    <WithStyles(TableCell)>
                      Approved
                    </WithStyles(TableCell)>,
                    <WithStyles(TableCell)>
                      Admin
                    </WithStyles(TableCell)>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <WithStyles(Checkbox)
                        checked={false}
                        indeterminate={false}
                        onChange={[Function]}
                      />,
                      "padding": "checkbox",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "checked": false,
                        "indeterminate": false,
                        "onChange": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Profile Pic",
                      "className": null,
                    },
                    "ref": null,
                    "rendered": "Profile Pic",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Name",
                      "className": null,
                    },
                    "ref": null,
                    "rendered": "Name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Email",
                    },
                    "ref": null,
                    "rendered": "Email",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Approved",
                    },
                    "ref": null,
                    "rendered": "Approved",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Admin",
                    },
                    "ref": null,
                    "rendered": "Admin",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Connect(WithStyles(UserTableRow))
                    handleSelect={[Function]}
                    isSelected={false}
                    user={
                      Object {
                        "id": "1",
                        "isAdmin": false,
                        "name": "Joey",
                      }
                    }
                  />,
                  <Connect(WithStyles(UserTableRow))
                    handleSelect={[Function]}
                    isSelected={false}
                    user={
                      Object {
                        "id": "2",
                        "isAdmin": false,
                        "name": "Ryan",
                      }
                    }
                  />,
                  <Connect(WithStyles(UserTableRow))
                    handleSelect={[Function]}
                    isSelected={false}
                    user={
                      Object {
                        "id": "3",
                        "isAdmin": true,
                        "name": "Espresso Shot Capuccino",
                      }
                    }
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "1",
                  "nodeType": "class",
                  "props": Object {
                    "handleSelect": [Function],
                    "isSelected": false,
                    "user": Object {
                      "id": "1",
                      "isAdmin": false,
                      "name": "Joey",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "2",
                  "nodeType": "class",
                  "props": Object {
                    "handleSelect": [Function],
                    "isSelected": false,
                    "user": Object {
                      "id": "2",
                      "isAdmin": false,
                      "name": "Ryan",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "3",
                  "nodeType": "class",
                  "props": Object {
                    "handleSelect": [Function],
                    "isSelected": false,
                    "user": Object {
                      "id": "3",
                      "isAdmin": true,
                      "name": "Espresso Shot Capuccino",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WithStyles(Paper)
          className={null}
        >
          <WithStyles(UserTableToolbar)
            handleBatchApprove={[Function]}
            handleBatchAuthorize={[Function]}
            handleBatchDelete={[Function]}
            numSelected={0}
          />
          <WithStyles(Table)>
            <WithStyles(TableHead)>
              <WithStyles(TableRow)>
                <WithStyles(TableCell)
                  padding="checkbox"
                >
                  <WithStyles(Checkbox)
                    checked={false}
                    indeterminate={false}
                    onChange={[Function]}
                  />
                </WithStyles(TableCell)>
                <WithStyles(TableCell)
                  className={null}
                >
                  Profile Pic
                </WithStyles(TableCell)>
                <WithStyles(TableCell)
                  className={null}
                >
                  Name
                </WithStyles(TableCell)>
                <WithStyles(TableCell)>
                  Email
                </WithStyles(TableCell)>
                <WithStyles(TableCell)>
                  Approved
                </WithStyles(TableCell)>
                <WithStyles(TableCell)>
                  Admin
                </WithStyles(TableCell)>
              </WithStyles(TableRow)>
            </WithStyles(TableHead)>
            <WithStyles(TableBody)>
              <Connect(WithStyles(UserTableRow))
                handleSelect={[Function]}
                isSelected={false}
                user={
                  Object {
                    "id": "1",
                    "isAdmin": false,
                    "name": "Joey",
                  }
                }
              />
              <Connect(WithStyles(UserTableRow))
                handleSelect={[Function]}
                isSelected={false}
                user={
                  Object {
                    "id": "2",
                    "isAdmin": false,
                    "name": "Ryan",
                  }
                }
              />
              <Connect(WithStyles(UserTableRow))
                handleSelect={[Function]}
                isSelected={false}
                user={
                  Object {
                    "id": "3",
                    "isAdmin": true,
                    "name": "Espresso Shot Capuccino",
                  }
                }
              />
            </WithStyles(TableBody)>
          </WithStyles(Table)>
        </WithStyles(Paper)>,
        "className": null,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(UserTableToolbar)
              handleBatchApprove={[Function]}
              handleBatchAuthorize={[Function]}
              handleBatchDelete={[Function]}
              numSelected={0}
            />,
            <WithStyles(Table)>
              <WithStyles(TableHead)>
                <WithStyles(TableRow)>
                  <WithStyles(TableCell)
                    padding="checkbox"
                  >
                    <WithStyles(Checkbox)
                      checked={false}
                      indeterminate={false}
                      onChange={[Function]}
                    />
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)
                    className={null}
                  >
                    Profile Pic
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)
                    className={null}
                  >
                    Name
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Email
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Approved
                  </WithStyles(TableCell)>
                  <WithStyles(TableCell)>
                    Admin
                  </WithStyles(TableCell)>
                </WithStyles(TableRow)>
              </WithStyles(TableHead)>
              <WithStyles(TableBody)>
                <Connect(WithStyles(UserTableRow))
                  handleSelect={[Function]}
                  isSelected={false}
                  user={
                    Object {
                      "id": "1",
                      "isAdmin": false,
                      "name": "Joey",
                    }
                  }
                />
                <Connect(WithStyles(UserTableRow))
                  handleSelect={[Function]}
                  isSelected={false}
                  user={
                    Object {
                      "id": "2",
                      "isAdmin": false,
                      "name": "Ryan",
                    }
                  }
                />
                <Connect(WithStyles(UserTableRow))
                  handleSelect={[Function]}
                  isSelected={false}
                  user={
                    Object {
                      "id": "3",
                      "isAdmin": true,
                      "name": "Espresso Shot Capuccino",
                    }
                  }
                />
              </WithStyles(TableBody)>
            </WithStyles(Table)>,
          ],
          "className": null,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleBatchApprove": [Function],
              "handleBatchAuthorize": [Function],
              "handleBatchDelete": [Function],
              "numSelected": 0,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(TableHead)>
                  <WithStyles(TableRow)>
                    <WithStyles(TableCell)
                      padding="checkbox"
                    >
                      <WithStyles(Checkbox)
                        checked={false}
                        indeterminate={false}
                        onChange={[Function]}
                      />
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)
                      className={null}
                    >
                      Profile Pic
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)
                      className={null}
                    >
                      Name
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)>
                      Email
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)>
                      Approved
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)>
                      Admin
                    </WithStyles(TableCell)>
                  </WithStyles(TableRow)>
                </WithStyles(TableHead)>,
                <WithStyles(TableBody)>
                  <Connect(WithStyles(UserTableRow))
                    handleSelect={[Function]}
                    isSelected={false}
                    user={
                      Object {
                        "id": "1",
                        "isAdmin": false,
                        "name": "Joey",
                      }
                    }
                  />
                  <Connect(WithStyles(UserTableRow))
                    handleSelect={[Function]}
                    isSelected={false}
                    user={
                      Object {
                        "id": "2",
                        "isAdmin": false,
                        "name": "Ryan",
                      }
                    }
                  />
                  <Connect(WithStyles(UserTableRow))
                    handleSelect={[Function]}
                    isSelected={false}
                    user={
                      Object {
                        "id": "3",
                        "isAdmin": true,
                        "name": "Espresso Shot Capuccino",
                      }
                    }
                  />
                </WithStyles(TableBody)>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <WithStyles(TableRow)>
                    <WithStyles(TableCell)
                      padding="checkbox"
                    >
                      <WithStyles(Checkbox)
                        checked={false}
                        indeterminate={false}
                        onChange={[Function]}
                      />
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)
                      className={null}
                    >
                      Profile Pic
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)
                      className={null}
                    >
                      Name
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)>
                      Email
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)>
                      Approved
                    </WithStyles(TableCell)>
                    <WithStyles(TableCell)>
                      Admin
                    </WithStyles(TableCell)>
                  </WithStyles(TableRow)>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(TableCell)
                        padding="checkbox"
                      >
                        <WithStyles(Checkbox)
                          checked={false}
                          indeterminate={false}
                          onChange={[Function]}
                        />
                      </WithStyles(TableCell)>,
                      <WithStyles(TableCell)
                        className={null}
                      >
                        Profile Pic
                      </WithStyles(TableCell)>,
                      <WithStyles(TableCell)
                        className={null}
                      >
                        Name
                      </WithStyles(TableCell)>,
                      <WithStyles(TableCell)>
                        Email
                      </WithStyles(TableCell)>,
                      <WithStyles(TableCell)>
                        Approved
                      </WithStyles(TableCell)>,
                      <WithStyles(TableCell)>
                        Admin
                      </WithStyles(TableCell)>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": <WithStyles(Checkbox)
                          checked={false}
                          indeterminate={false}
                          onChange={[Function]}
                        />,
                        "padding": "checkbox",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "checked": false,
                          "indeterminate": false,
                          "onChange": [Function],
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Profile Pic",
                        "className": null,
                      },
                      "ref": null,
                      "rendered": "Profile Pic",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Name",
                        "className": null,
                      },
                      "ref": null,
                      "rendered": "Name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Email",
                      },
                      "ref": null,
                      "rendered": "Email",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Approved",
                      },
                      "ref": null,
                      "rendered": "Approved",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Admin",
                      },
                      "ref": null,
                      "rendered": "Admin",
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Connect(WithStyles(UserTableRow))
                      handleSelect={[Function]}
                      isSelected={false}
                      user={
                        Object {
                          "id": "1",
                          "isAdmin": false,
                          "name": "Joey",
                        }
                      }
                    />,
                    <Connect(WithStyles(UserTableRow))
                      handleSelect={[Function]}
                      isSelected={false}
                      user={
                        Object {
                          "id": "2",
                          "isAdmin": false,
                          "name": "Ryan",
                        }
                      }
                    />,
                    <Connect(WithStyles(UserTableRow))
                      handleSelect={[Function]}
                      isSelected={false}
                      user={
                        Object {
                          "id": "3",
                          "isAdmin": true,
                          "name": "Espresso Shot Capuccino",
                        }
                      }
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "1",
                    "nodeType": "class",
                    "props": Object {
                      "handleSelect": [Function],
                      "isSelected": false,
                      "user": Object {
                        "id": "1",
                        "isAdmin": false,
                        "name": "Joey",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "2",
                    "nodeType": "class",
                    "props": Object {
                      "handleSelect": [Function],
                      "isSelected": false,
                      "user": Object {
                        "id": "2",
                        "isAdmin": false,
                        "name": "Ryan",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "3",
                    "nodeType": "class",
                    "props": Object {
                      "handleSelect": [Function],
                      "isSelected": false,
                      "user": Object {
                        "id": "3",
                        "isAdmin": true,
                        "name": "Espresso Shot Capuccino",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
